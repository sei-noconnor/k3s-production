#!/bin/bash -e
# Must be run as sudo
#[ `whoami` = root ] || { sudo "$0" "$@"; exit $?; }
directory=$(dirname "${BASH_SOURCE[0]}")
cd ${directory}
source ../scripts/utils
import_vars ../env
exports_path="./seed/gitlab"
timeout=0
max_timeout=1200
domain=${domain:-$DOMAIN}
if [[ -z $GITLAB_URL ]]; then
  export GITLAB_URL=gitlab.$domain
  sed -i -e "s/GITLAB_URL=.*/GITLAB_URL=gitlab.$domain/" ../env
fi
# set gitlab variables.
gitlab_token=$(awk '/Terraform__GitlabToken/ {print $2}' caster.values.yaml | tr -d '"')
modules_group="caster-modules"
admin_uid=$(awk '/Account__AdminGuid/ {print $2}' ../common/identity.values.yaml | tr -d '"')
gitlab_group_id=$(awk '/Terraform__GitlabGroupId/ {print $2}' caster.values.yaml | tr -d '"')
echo "GitlabToken: ${gitlab_token}"
echo "GitlabGroupId: ${gitlab_group_id}"
echo "AdminUid: ${admin_uid}" 
gitlab_host="https://${GITLAB_URL}"
gitlab_user="administrator@${domain}"
gitlab_password="foundry"
api_url="${gitlab_host}/api/v4"

# add gitlab to hosts file
echo "$LOCAL_SUDO_PASS" | sudo -S bash -c "sed -i /$GITLAB_URL/d /etc/hosts" 
external_ip=$(wait_external_ip $INGRESS_NAMESPACE-nginx-$INGRESS_CONTROLLER_NAME $INGRESS_NAMESPACE)
echo "The External IP is $external_ip"
echo "ADDING HOST ENTRY"
add_host_entry $external_ip $GITLAB_URL

# add repo and update
helm repo add gitlab https://charts.gitlab.io
helm repo update
echo "Waiting for Postgres to be ready."
while [ "$(kubectl get pods -l=app.kubernetes.io/name='postgresql' -o jsonpath='{.items[*].status.containerStatuses[0].ready}')" != "true" ]; do
  printf '.'
  sleep 5
  timeout=$((timeout+5))
  if [ ${timeout} -gt ${max_timeout} ]; then
    cat << EOF
    Postgres timed out

    please rerun setup-gitlab
EOF
    exit;
  fi
done
timeout=0
kubectl exec postgresql-0 -- psql "postgresql://$POSTGRES_USER:$POSTGRES_PASS@localhost" -c "CREATE DATABASE gitlab_db;" || true
envsubst < gitlab.secrets.yaml | kubectl apply -f -
helm_deploy -r ../env -p ../helm -u -v 5.7.1 -f gitlab-min.values.yaml gitlab/gitlab

# Wait for gitllab to come up 
cat << EOF 

  Waiting for gitlab to become available, this may take a while...
  
  Timeout set to ${max_timeout} seconds
EOF

until $(curl --output /dev/null --silent --head --insecure --fail ${gitlab_host}/users/sign_in); do
  printf '.'
  sleep 5
  timeout=$((timeout+5))
  if [ ${timeout} -gt ${max_timeout} ]; then
    cat << EOF
    Gitlab connection timed out

    please rerun setup-gitlab 
EOF
    exit;
  fi
done

kex_q gitlab-toolbox gitlab-rails runner -q"u = User.create_or_find_by(username: 'root', email: 'administrator@${domain}', name: 'Administrator' , password: '$ADMIN_PASS', password_confirmation: '$ADMIN_PASS', admin: true); u.skip_confirmation=true; u.save"
kex_q gitlab-toolbox gitlab-rails runner -q"token = User.find_by_username('root').personal_access_tokens.create(scopes: [:api], name: 'root seed token'); token.set_token('${gitlab_token}'); token.save!"

echo "Personal Access Token is: ${gitlab_token}"
h_auth="Private-Token: ${gitlab_token}"
h_json="Content-Type: application/json"

# Set root to admin@${domain}
req=$(curl -ks --location --request GET "${api_url}/users?username=root")
user_id=$(echo ${req} | jq -j '.[0] | .id')
data_json=$(echo ${req} | jq --arg admin_uid "${admin_uid}" '.[0] | .provider = "identity" | .extern_uid = $admin_uid')
req=$(curl -k --location --request PUT "${api_url}/users/${user_id}" \
--header "${h_json}" \
--header "${h_auth}" \
--data "${data_json}")
echo "UserId: ${user_id}"
echo $req | jq .


# Check if the group exists by name
  req=$(curl -ks --location --request GET "${api_url}/groups?search=${modules_group}" \
  --header "${h_json}" \
  --header "${h_auth}")
  echo $req | jq .
  
  group=$(echo ${req} | jq --arg name "${modules_group}" '.[] | select(.name=$name)')
  gitlab_group_id=$(echo ${group} | jq -j '.id')

  if [[ -z ${group} ]]; then

    # Create caster modules group
    data_json=$(cat <<EOF
      {
        "name": "${modules_group}",
        "path": "${modules_group}",
        "visibility": "public"
      }
EOF
    )

    req=$(curl -ks --location --request POST "${api_url}/groups" \
    --header "${h_json}" \
    --header "${h_auth}" \
    --data "${data_json}")
    echo ${req} | jq .
    gitlab_group_id=$(echo ${req} | jq -j '.id')
   
  fi

# Import all projects into group, file name without the extension will be the repo name.
files=$(find ${exports_path} -type f -iname "*.tar.gz" | sed "s/.*\///; s/\.tar.gz//")
cd ${exports_path}
for file in ${files}; do
  # Gitlab has terrible support for repos exported with different versions of gitlab
  # We need to extract the repo 
  mkdir -p "${file}" && tar -xzf ${file}.tar.gz --overwrite -C $file
  
  git clone --mirror "${file}/project.bundle" "${file}/.git"
  git -C ${file} init
  git -C ${file} checkout 
  git -C ${file} status
  git -C ${file} remote remove origin
  #Create project
  data_json=$(cat <<EOF
      {
        "name": "${file}",
        "namespace_id": ${gitlab_group_id},
        "visibility": "public"
      }
EOF
    )

  req=$(curl -k --location --request POST "${api_url}/projects" \
    --header "${h_json}" \
    --header "${h_auth}" \
    --data "${data_json}")
  project_id=$(echo ${req} | jq '.id')
  if [[ -n "$project_id" ]]; then 
    git -C ${file} remote add origin "$gitlab_host/${modules_group}/${file}.git"
    git -C ${file} push -u https://root:$ADMIN_PASS@${GITLAB_URL}/${modules_group}/${file}.git --all
    git -C ${file} push -u https://root:$ADMIN_PASS@${GITLAB_URL}/${modules_group}/${file}.git --tags
  fi
  # cleanup
  rm -rf ${file}
  sleep 3
done
cd ../../


