#!/bin/bash -xe
# 
# Copyright 2021 Carnegie Mellon University.
# Released under a BSD (SEI)-style license, please see LICENSE.md in the
# project root or contact permission@sei.cmu.edu for full terms.
#
# Import crucible example content into the appliance
#
# import-content
exports_path="seed/crucible"
domain=${domain-crucible.io}
directory=$(dirname "$BASH_SOURCE[0]")
cd $directory
echo "directory: $directory"
source ../scripts/utils
import_vars ../env

#replace foundry.local $domain $directory/$exports_path
#replace crucible.io $domain $directory/$exports_path

helm delete alloy || true && sleep 5
helm delete caster || true && sleep 5
helm delete player || true && sleep 5
helm delete steamfitter || true && sleep 5
kubectl delete -f player-console-ingress.yaml

echo "sleeping for 20 seconds"
sleep 20
echo "forwarding port" 
kubectl port-forward service/postgresql 5432:5432 > /dev/null 2>&1 &
pid=$!

trap '{
  echo killing $pid
  kill $pid
}' EXIT
while ! nc -vz localhost 5432 > /dev/null 2>&1 ; do
  echo "waiting for port to become available "
  sleep 1
done

files=$(find $exports_path -type f -iname "*.sql" | sed "s/.*\///; s/\.sql//")
for file in $files; do
  echo "Dropping Database $file"
  kubectl exec postgresql-0 -- psql "postgresql://$POSTGRES_USER:$POSTGRES_PASS@localhost" -c "DROP DATABASE IF EXISTS $file WITh (FORCE);" || true
  echo "Creating Database $file"
  kubectl exec postgresql-0 -- psql "postgresql://$POSTGRES_USER:$POSTGRES_PASS@localhost" -c "CREATE DATABASE $file;" || true
  envsubst < $exports_path/${file}.sql | sed 's/LOCALE/LC_COLLATE/' | PGPASSWORD=$POSTGRES_PASS psql -h localhost -p 5432 -U postgres $file
done

replace_vars player-console-ingress.yaml
kubectl apply -f player-console-ingress.yaml
helm_deploy -r ../env -p ../helm -u -v 1.4.1 -f player.values.yaml sei/player
helm_deploy -r ../env -p ../helm -u -v 1.4.1 -f caster.values.yaml sei/caster
helm_deploy -r ../env -p ../helm -u -v 1.4.0 -f alloy.values.yaml sei/alloy

# get MOID for steamfitter
echo "Attempting to get vsphere cluster"
MOID=$(pwsh -c 'Connect-VIServer -server $env:VSPHERE_SERVER -user $env:VSPHERE_USER -password $env:VSPHERE_PASS | Out-Null; Get-Cluster -Name $env:VSPHERE_CLUSTER | select -ExpandProperty id')
MOID=$(echo "${MOID}" | rev | cut -d '-' -f 1,2 | rev)

if [[ -n ${MOID} ]]; then
  sed -i "s/VmTaskProcessing__ApiParameters__clusters:.*/VmTaskProcessing__ApiParameters__clusters: ${MOID}/" "steamfitter.values.yaml"
  echo "vsphere cluster set"
fi

helm_deploy -r ../env -p ../helm -u -v 1.4.0 -f steamfitter.values.yaml sei/steamfitter
helm_deploy -r ../env -p ../helm -u -v 13.0.0 --wait -f mongodb.values.yaml bitnami/mongodb
helm_deploy -r ../env -p ../helm -u -v 0.80.0 --wait --timeout 10m -f stackstorm-min.values.yaml stackstorm/stackstorm-ha
