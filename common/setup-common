#!/bin/bash -e
# 
# Copyright 2021 Carnegie Mellon University.
# Released under a BSD (SEI)-style license, please see LICENSE.md in the
# project root or contact permission@sei.cmu.edu for full terms.

#############################
#   Foundry Stack Install   #
#############################

# Change to the current directory
cd "$(dirname "${BASH_SOURCE[0]}")"
source ../scripts/utils
import_vars ../env
kubectl config set-context --current --namespace=default

# Forward coredns to host dnsmasq
kubectl get configmap/coredns -n kube-system -o yaml | sed "s/\/etc\/resolv.conf/$DNS_01/" | kubectl replace -f -
kubectl rollout restart deployment/coredns -n kube-system

# Disable HSTS
kubectl patch configmap $INGRESS_CONFIGMAP \
                        --patch "$(cat ingress-hsts-disable.yaml)" \
                        --namespace $INGRESS_NAMESPACE

# Add host certificate
kubectl create secret tls appliance-cert --key certs/host-key.pem --cert <( cat certs/host.pem certs/int-ca.pem ) --dry-run=client -o yaml | kubectl apply -f -
# Add root ca
kubectl create secret generic appliance-root-ca --from-file=appliance-root-ca=certs/root-ca.pem --dry-run=client -o yaml | kubectl apply -f -
# Add vsphere cert prevent failing if it doesen't exist
if [[ -f certs/vsphere.pem ]]; then
  kubectl create configmap appliance-root-ca --from-file=root-ca.crt=certs/root-ca.pem --from-file=vsphere-ca.crt=certs/vsphere.pem --dry-run=client -o yaml | kubectl apply -f -
else
  kubectl create configmap appliance-root-ca --from-file=root-ca.crt=certs/root-ca.pem --dry-run=client -o yaml | kubectl apply -f -
fi
# Install PostgreSQL and pgAdmin4
helm_deploy -r ../env -p ../helm -u --wait -f postgresql.values.yaml bitnami/postgresql
#helm install -f pgadmin4.values.yaml pgadmin4 runix/pgadmin4

# Install code-server (browser-based VS Code)
helm_deploy -r ../env -p ../helm -u -f code-server.values.yaml nicholaswilde/code-server

# Kubernetes Dashboard
# helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
# helm upgrade --install -f kubernetes-dashboard.values.yaml kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard
# Add root CA to chart values
# ed -s staticweb.values.yaml <<< $'/cacert:/s/\"\"/|-/\n/cacert:/r !sed "s/^/  /" certs/root-ca.pem\nw'

# cp certs/root-ca.pem web/root-ca.crt

# Install NFS server
helm_deploy -r ../env -p ../helm -u -f nfs-server-provisioner.values.yaml kvaps/nfs-server-provisioner
kubectl patch $INGRESS_KIND $INGRESS_NAMESPACE-$INGRESS_CONTROLLER_NAME -n $INGRESS_NAMESPACE --type 'json' --patch \
  '[{"op": "add", "path": "/spec/template/spec/containers/0/ports/-", "value": {"name":"nfs-tcp","hostPort":2049,"containerPort":2049,"protocol":"TCP"}}]' || true
kubectl patch $INGRESS_KIND $INGRESS_NAMESPACE-$INGRESS_CONTROLLER_NAME -n $INGRESS_NAMESPACE --type 'json' --patch \
  '[{"op": "add", "path": "/spec/template/spec/containers/0/ports/-", "value": {"name":"nfs-udp","hostPort":2049,"containerPort":2049,"protocol":"UDP"}}]' || true
envsubst < nfs-ingress.yaml | kubectl apply -f - --dry-run=client -o yaml | kubectl apply -f -

# Install Gitea
git config --global init.defaultBranch main
kubectl exec postgresql-0 -- psql 'postgresql://$POSTGRES_USER:$POSTGRES_PASS@localhost' -c 'CREATE DATABASE gitea;' || true
helm_deploy -r ../env -p ../helm -u -f gitea.values.yaml gitea/gitea
timeout 5m bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://$DOMAIN/gitea)" != "200" ]]; do sleep 5; done' || false
./setup-gitea

# Install Common foundry apps
if [[ $ENABLE_CAC = true ]]; then 
  kubectl create configmap dod-certs --from-file=issuers-dod-sei.crt=certs/issuers-dod-sei.crt -n ingress --dry-run=client -o yaml | kubectl apply -f -
  kubectl create secret generic dod-certs --from-file=ca.crt=certs/issuers-dod-sei.crt -n ingress --dry-run=client -o yaml | kubectl apply -f -
  helm_deploy -r ../env -u -v 0.2.0 -p ~/.helm -f identity-cac.values.yaml sei/identity
else
  helm_deploy -r ../env -u -v 0.2.0 -p ~/.helm -f identity.values.yaml sei/identity
fi
